- id: b299c120-44a7-4d68-b8e2-8ba5a28511ec
  name: 'Domain Password Policy Check: No Uppercase Character in Password'
  description: 'Attempt to change the password of the current domain user in order
    to check password policy. Ideally, you would only run this atomic test to verify
    that your password policy is blocking the use of the new password.

    If the password is succesfully changed to the new password, the credential file
    will be updated to reflect the new password. You can then run the atomic manually
    and specify a new password of your choosing, however the

    password policy will likely prevent you from setting the password back to what
    it was.'
  tactic: persistence
  technique:
    attack_id: T1098
    name: Account Manipulation
  platforms:
    windows:
      psh:
        command: 'if (Test-Path $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt)
          {exit 0} else {exit 1}; then : ; else New-Item -Type Directory (split-path
          "$env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt") -ErrorAction Ignore
          | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message "Enter
          password for $env:USERNAME to use during password change attempt"; $cred.Password
          | ConvertFrom-SecureString | Out-File "$env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt";
          fi; $credFile = "$env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt"; if
          (Test-Path $credFile) {; $cred = New-Object -TypeName System.Management.Automation.PSCredential
          -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);
          if($cred.GetNetworkCredential().Password -eq "lower-long-special-333"){;
          Write-Host -ForegroundColor Yellow "The new password is the same as the
          password stored in the credential file. Please specify a different new password.";
          exit -1; }; try {; $newPassword = ConvertTo-SecureString lower-long-special-333
          -AsPlainText -Force; Set-ADAccountPassword -Identity $env:USERNAME -OldPassword
          $cred.password -NewPassword $newPassword; }; catch {; $_.Exception; $errCode
          = $_.Exception.ErrorCode; Write-Host "Error code: $errCode"; if ($errCode
          -eq 86) {; Write-Host -ForegroundColor Yellow "The stored password for the
          current user is incorrect. Please run the prereq commands to set the correct
          credentials"; Remove-Item $credFile; }; exit $errCode; }; Write-Host -ForegroundColor
          Cyan "Successfully changed the password to lower-long-special-333"; $newCred
          = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString
          "lower-long-special-333" -AsPlainText -Force)); $newCred.Password | ConvertFrom-SecureString
          | Out-File $credFile; }; else {; Write-Host -ForegroundColor Yellow "You
          must store the password of the current user by running the prerequisite
          commands first"; }'
  plugin: atomic
  singleton: false
  repeatable: true
  delete_payload: false
  privilege: ''
  buckets:
  - t1098
  - atomic-red-team
  - persistence
  author: Atomic Red Team
  additional_info:
    input_arguments:
      new_password:
        description: The password to set for the current domain user (default is long
          and has and lower case and special character and number but no uppercase)
        type: string
        default: lower-long-special-333
      cred_file:
        description: A file containing the password of the current user
        type: path
        default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt
    dependencies:
    - description: 'Password for current user must be stored in a credential file

        '
      prereq_command: 'if (Test-Path #{cred_file}) {exit 0} else {exit 1}

        '
      get_prereq_command: 'New-Item -Type Directory (split-path "#{cred_file}") -ErrorAction
        Ignore | Out-Null

        $cred = Get-Credential -UserName  $env:USERNAME -message "Enter password for
        $env:USERNAME to use during password change attempt"

        $cred.Password | ConvertFrom-SecureString | Out-File "#{cred_file}"

        '
    technique_created: '2017-05-31T21:31:12.196Z'
    atomic_guid: b299c120-44a7-4d68-b8e2-8ba5a28511ec
    import_timestamp: '2025-09-19T03:02:31.348848Z'
