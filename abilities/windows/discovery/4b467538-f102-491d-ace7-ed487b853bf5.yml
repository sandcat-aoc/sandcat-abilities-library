- id: 4b467538-f102-491d-ace7-ed487b853bf5
  name: List Open Egress Ports
  description: 'This is to test for what ports are open outbound.  The technique used
    was taken from the following blog:

    https://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/


    Upon successful execution, powershell will read top-128.txt (ports) and contact
    each port to confirm if open or not. Output will be to Desktop\open-ports.txt.'
  tactic: discovery
  technique:
    attack_id: T1016
    name: System Network Configuration Discovery
  platforms:
    windows:
      psh:
        command: 'if (Test-Path "PathToAtomicsFolder\T1016\src\top-128.txt") {exit
          0} else {exit 1}; then : ; else New-Item -Type Directory (split-path "PathToAtomicsFolder\T1016\src\top-128.txt")
          -ErrorAction ignore | Out-Null; Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt"
          -OutFile "PathToAtomicsFolder\T1016\src\top-128.txt"; fi; $ports = Get-content
          "PathToAtomicsFolder\T1016\src\top-128.txt"; $file = "$env:USERPROFILE\Desktop\open-ports.txt";
          $totalopen = 0; $totalports = 0; New-Item $file -Force; foreach ($port in
          $ports) {; $test = new-object system.Net.Sockets.TcpClient; $wait = $test.beginConnect("allports.exposed",
          $port, $null, $null); $wait.asyncwaithandle.waitone(250, $false) | Out-Null;
          $totalports++ | Out-Null; if ($test.Connected) {; $result = "$port open";
          Write-Host -ForegroundColor Green $result; $result | Out-File -Encoding
          ASCII -append $file; $totalopen++ | Out-Null; }; else {; $result = "$port
          closed"; Write-Host -ForegroundColor Red $result; $totalclosed++ | Out-Null;
          $result | Out-File -Encoding ASCII -append $file; }; }; $results = "There
          were a total of $totalopen open ports out of $totalports ports tested.";
          $results | Out-File -Encoding ASCII -append $file; Write-Host $results'
        cleanup: Remove-Item -ErrorAction ignore "#{output_file}"
  plugin: atomic
  singleton: false
  repeatable: true
  delete_payload: false
  privilege: ''
  buckets:
  - discovery
  - atomic-red-team
  - t1016
  author: Atomic Red Team
  additional_info:
    input_arguments:
      output_file:
        description: Path of file to write port scan results
        type: path
        default: $env:USERPROFILE\Desktop\open-ports.txt
      portfile_url:
        description: URL to top-128.txt
        type: url
        default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt
      port_file:
        description: The path to a text file containing ports to be scanned, one port
          per line. The default list uses the top 128 ports as defined by Nmap.
        type: path
        default: PathToAtomicsFolder\T1016\src\top-128.txt
    dependencies:
    - description: 'Test requires #{port_file} to exist

        '
      prereq_command: 'if (Test-Path "#{port_file}") {exit 0} else {exit 1}

        '
      get_prereq_command: 'New-Item -Type Directory (split-path "#{port_file}") -ErrorAction
        ignore | Out-Null

        Invoke-WebRequest "#{portfile_url}" -OutFile "#{port_file}"

        '
    technique_created: '2017-05-31T21:30:27.342Z'
    atomic_guid: 4b467538-f102-491d-ace7-ed487b853bf5
    import_timestamp: '2025-08-16T03:15:26.426796Z'
